user  uniagent onip;
worker_processes  1; # 默认1 ,一般建议设置成cpu核数的1-2倍
worker_rlimit_nofile 65535;
error_log  路径/logs/error.log  error; # 错误日志路径
pid        路径/logs/nginx.pid; # 进程id


events {
    use epoll;  # 使用epoll的I/O 模型处理轮询事件,可以不设置，nginx会根据操作系统选择合适的模型
    worker_connections  1024;     # 工作进程最大连接数 默认1024个
}

http {

    include       mime.types;    # 导入文件扩展名与文件类型映射表
    default_type  application/octet-stream;     # 默认文件类型
    # 响应头中是否包含nginx版本号,默认开启
    server_tokens off;
    # 开启索引功能,默认off
    autoindex off;
    # 是否处理重定向的端口指示,默认on
    port_in_redirect off;
    # 客户端请求正文读取的超时时间 默认60
    client_body_timeout 10
    # 读取客户端请求头的超时时间 默认60
    client_header_timeout 10
    sendfile        on ;  # 允许sendfile方式传输文件，默认为off
    tcp_nopush   on; # sendfile开启时才开启
    # 发送超时时间
    send_timeout 10
    # 隐藏的头部信息
    proxy_hide_header X-Powered-By;
    # 存储会话状态的区域,(会话状态被分配 100k 作为称为“one”的区域，并且该区域的平均查询速度限制为每两秒1个请求)
    limit_req_zone  $binary_remote_addr zone=one:100k rate=30r/s; #

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    # 日志格式及access日志路径
    access_log  路径/logs/access.log  main;

    client_body_temp_path 路径/client_body_temp;
    fastcgi_temp_path 路径/fastcgi_temp;
    uwsgi_temp_path  路径/uwsgi_temp;
    scgi_temp_path  路径/scgi_temp


    keepalive_timeout  65; # http层面的keep-alive超时时间

    #获取用户真实ip,并赋值给变量  $clientRealIP
    map $http_x_real_client_addr $clientReallp {
        ""      $remote_addr;
        ~^(?P<firstAddr>[0-9\.]+),?.*$  $firstAddr;
    }

    upstream backend {
        hash   $clientReallp;
        server 127.0.0.1:8080;

    }


    server {
        listen       80;
        server_name  网站域名;


        add_header Expires  0;
        # 告诉客户端浏览器不使用缓存，HTTP 1.1 协议
        add_header Pragma no-cache;
        add_header Cache-Control "no-cache,no-store,must-revalidate";
        add_header Strict-Transport-Security "max-age=31536000;includeSubDomains";
        # 防止基于MIME类型不安全的文件
        add_header X-Content-Type-Options nosniff;

        client_header_buffer_size 1k; #指令设置来自客户端的请求标头的标头缓冲区大小
        # 从客户端请求读取的大型标头分配缓冲区的最大数量和大小
        large_client_header_buffers 4 8k;
        # 该指令指定客户端请求正文缓冲区大小。
        client_body_buffer_size 16k
        # 指令分配客户端请求的最大可接受正文大小
        lient_max_body_size 5m

        limit_req   zone=one  burst=30;
        proxy_connect_timeout 180;
        proxy_read_timeout 180;
        proxy_send_timeout 180;
        send_timeout 90;
        # 开启gzip压缩功能
        gzip on;
        # 设置允许压缩的页面最小字节数; 这里表示如果文件小于10k，压缩没有意义.
        gzip_min_length 10k;
        # 设置压缩比率，最小为1，处理速度快，传输速度慢；
        # 9为最大压缩比，处理速度慢，传输速度快; 推荐6
        gzip_comp_level 6;
        # 设置压缩缓冲区大小，此处设置为16个8K内存作为压缩结果缓冲
        gzip_buffers 16 8k;
        # 设置哪些文件需要压缩,一般文本，css和js建议压缩。图片视需要要锁。
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        $clientRealIP map  http_x_real_client_addr  $clientRealIp {
            ""      $remote_addr;
            ~^(?P<firstAddr>[0-9\.]+),?.*$  $firstAddr;
        }
        location / {
             # 使用proxy_pass转发请求到通过upstream定义的一组应用服务器
              proxy_pass      http://backend_server;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 给所有代理加上X-Forwarded-For获得用户ip
              proxy_set_header X-Real-IP  $remote_addr; # 给第一层代理后端请求携带原始请求的真实IP地址
              proxy_set_header Host $http_host; # 把原有http请求的header中的host字段也放到转发的请求
              proxy_set_header X-Gunirorn-IP $http_x_real_client_addr;
              real_ip_cursive on;
              limit_except GET POST HEAD {
                    deny all;
              }
              proxy_redirect off;
              add_header Content-Security-Policy "default-src 'self'";
              add_header X-Frame-Options SAMEORIGIN;
              add_header X-XSS-Protection "1; mode=block";

        }

        location /static {
            alias  /opt/my_project/Online-Shop-Background/OnlineShop/static ; # 指定查看文件列表路径

        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


    }


}